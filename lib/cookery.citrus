grammar CookeryGrammar
  rule file
    (space* (import space+)* activity space*)+ {
    (capture(:import) ? captures(:import).map(&:value).join("\n") +
      "\n": "") + captures(:activity).map {|a| a.value }.join("\n")
    }
  end

  rule import
    ('import' space+ /[\'\"]/ path /[\'\"]/ (space + 'as' space+ module_name)?)

    {
    n = Node.new(:import)
    n.set(:path, capture(:path).value)
    n.set(:module_name, capture(:module_name).value) \
        if capture(:module_name)
    add_node(n)

    capture(:module_name) ? "(import \"" + capture(:path).value + "\" " +
    capture(:module_name).value + ")" : "(import " + capture(:path).value + ")"
    }
  end

  rule path
    /[[:alnum:]\/_.-]+(\/[[:alnum:]\/_.-]+)*/
  end

  rule module_name
    /[[:alnum:]]/
  end

  rule activity
    ((var:(list_variable | variable) variable_separator space+)?
    action_group
    (space+ subject_or_variable)?
    (space+ condition_group)? END) <ActivityStatement>
  end

  rule variable
    /\b[[:upper:]][[:alnum:]]*\b/ {
      n = Node.new(:variable)
      n.set(:name, to_str)
      add_node(n)

      to_str
    }
  end

  rule list_variable
    (/\b[[:upper:]][[:alnum:]]*\b/ '[]') {
      n = Node.new(:list_variable)
      n.set(:name, to_str)
      add_node(n)

      to_str
    }
  end

  rule action_group
    (action (space+ action_arguments)?) {

    n = Node.new(:action)
    n.set(:name, capture(:action).value)
    add_node(n)

    if capture(:action_arguments)
      n.set(:arguments, capture(:action_arguments).value)
      capture(:action).value + " \"" +
      capture(:action_arguments).value + "\""
    else
      capture(:action).value
    end
    }
  end

  rule action
    /\b[[:lower:]_-]+\b/
  end

  rule action_arguments
    (action_argument (space+ action_argument)*) {
    captures[:action_argument].map { |a| a.value }.join(' ')
    }
  end

  rule action_argument
    ('{' /[^}]+/ '}') | (~(subject | subject_list | condition_separator | space | END) (~(space | END))?)
  end

  rule subject_or_variable
    ((subject_list | subject_group)
    (space+ AND space+ subject_or_variable)*) <SubjectOrVariable>
  end

  rule subject_list
    (/\b[[:upper:]][[:alnum:]]*\b/ '[]') {
      n = Node.new(:list_subject)
      n.set(:name, to_str)
      add_node(n)

      to_str
    }
  end

  rule subject_group
    (subject (space+ subject_arguments)?) {

    n = Node.new(:subject)
    n.set(:name, capture(:subject).value)
    add_node(n)

    if capture(:subject_arguments)
      n.set(:arguments, capture(:subject_arguments).value)
      "(" + capture(:subject).value + " \"" +
        capture(:subject_arguments).value + "\")"
    else
      capture(:subject).value
    end
    }
  end

  rule subject
    /\b[[:upper:]][[:alnum:]]*\b/
  end

  rule subject_arguments
    (subject_argument (space+ subject_argument)*) {
    captures[:subject_argument].map { |a| a.value }.join(' ')
    }
  end

  rule subject_argument
    (~(condition_separator | AND | space | END) (~(space | END))?)
  end

  rule condition_group
    (condition_separator space+ condition (space+ condition_arguments)?) {

    n = Node.new(:condition)
    n.set(:name, capture(:condition).value)
    add_node(n)

    if capture(:condition_arguments)
      n.set(:arguments, capture(:condition_arguments).value)
      "(" + capture(:condition).value + " \"" +
        capture(:condition_arguments).value + "\")"
    else
      capture(:condition).value
    end
    }
  end

  rule condition
    /\b[[:alnum:]]+\b/
  end

  rule condition_arguments
    ~END
  end

  rule comment /\#.*/ end
  rule space /[ \t\n\r]/ | comment end
  rule END /[ \t\n\r]*\.(\z|[ \t\n\r])/ end
  rule AND 'and' end
  rule variable_separator space* '=' end
  rule condition_separator /\bwith\b/ | /\bif\b/ end
end
