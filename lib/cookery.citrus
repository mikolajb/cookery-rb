grammar Cookery
  rule file
    (space* activity space*)+ {
    if captures[:activity].size > 1
      's(' + captures[:activity].map {|a| a.value }.join(', ') + ')'
    else
      capture(:activity).value
    end
    }
  end

  rule activity
    ((var:(list_variable | variable) variable_separator)?
    space* action_group
    (space* subject_or_variable)?
    (space* condition_group)? END) <Activity>
  end

  rule variable
    /[[:upper:]][[:alnum:]]*/ { "s(:variable, " + to_str + ")" }
  end

  rule list_variable
    (/[[:upper:]][[:alnum:]]*/ '[]') { "s(:list_variable, " + to_str + ")" }
  end

  rule action_group
    (action (space+ action_arguments)?) {
    if capture(:action_arguments)
    "s(:action, " + capture(:action).value + ", " +
    capture(:action_arguments).value + ")"
    else
    "s(:action, " + capture(:action).value + ")"
    end
    }
  end

  rule action
    /[[:lower:]]+/
  end

  rule action_arguments
    ~((space* /[[:upper:]]/) | (space* 'with') | END)
    { "s(:action_arguments, \"" + to_str + "\")" }
  end

  rule subject_or_variable
    ((list_variable | subject_group)
    (space+ AND space+ subject_or_variable)*) <SubjectOrVariable>
  end

  rule subject_group
    (subject (space+ subject_arguments)?) {
    "s(:subject, " + capture(:subject).value +
      (capture(:subject_arguments) ?
         (", " + capture(:subject_arguments).value) : "") + ")"
    }
  end

  rule subject
    /[[:upper:]][[:alnum:]]*/
  end

  rule subject_arguments
    ~((space* 'with') | (space* AND) | END) {
    "s(:subject_arguments, \"" + to_str + "\")" }
  end

  rule condition_group
    ('with' space+ condition (space+ condition_arguments)?) {
    if capture(:condition_arguments)
    "s(:condition, " + capture(:condition) + ", " +
    capture(:condition_arguments).value + ")"
    else
    "s(:condition, " + capture(:condition) + ")"
    end
    }
  end

  rule condition
    /[[:alnum:]]+/
  end

  rule condition_arguments
    ~END { "c(:condition_arguments, \"" + to_str + "\")"}
  end

  rule comment /\#.*/ end
  rule space /[ \t\n\r]/ | comment end
  rule END /[ \t\n\r]*\.(\z|[ \t\n\r])/ end
  rule AND 'and' end
  rule variable_separator space* '=' end
end
